// Generated by view binder compiler. Do not edit!
package com.spcmic.recorder.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.spcmic.recorder.LevelMeterView;
import com.spcmic.recorder.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnRecord;

  @NonNull
  public final MaterialButton btnRefreshDevices;

  @NonNull
  public final MaterialButton btnResetClip;

  @NonNull
  public final LinearLayout clipIndicatorContainer;

  @NonNull
  public final LevelMeterView levelMeterView;

  @NonNull
  public final LinearLayout sampleRateContainer;

  @NonNull
  public final Spinner spinnerSampleRate;

  @NonNull
  public final MaterialToolbar topAppBar;

  @NonNull
  public final TextView tvBitDepthInfo;

  @NonNull
  public final TextView tvChannelInfo;

  @NonNull
  public final TextView tvClipIndicator;

  @NonNull
  public final TextView tvConnectionStatus;

  @NonNull
  public final TextView tvFormatInfo;

  @NonNull
  public final TextView tvNegotiatedSampleRate;

  @NonNull
  public final TextView tvRecordingFilename;

  @NonNull
  public final TextView tvRecordingTime;

  @NonNull
  public final TextView tvSampleRateInfo;

  @NonNull
  public final TextView tvSampleRateLabel;

  @NonNull
  public final TextView tvSampleRateStatus;

  @NonNull
  public final TextView tvSampleRateSupport;

  private ActivityMainBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnRecord, @NonNull MaterialButton btnRefreshDevices,
      @NonNull MaterialButton btnResetClip, @NonNull LinearLayout clipIndicatorContainer,
      @NonNull LevelMeterView levelMeterView, @NonNull LinearLayout sampleRateContainer,
      @NonNull Spinner spinnerSampleRate, @NonNull MaterialToolbar topAppBar,
      @NonNull TextView tvBitDepthInfo, @NonNull TextView tvChannelInfo,
      @NonNull TextView tvClipIndicator, @NonNull TextView tvConnectionStatus,
      @NonNull TextView tvFormatInfo, @NonNull TextView tvNegotiatedSampleRate,
      @NonNull TextView tvRecordingFilename, @NonNull TextView tvRecordingTime,
      @NonNull TextView tvSampleRateInfo, @NonNull TextView tvSampleRateLabel,
      @NonNull TextView tvSampleRateStatus, @NonNull TextView tvSampleRateSupport) {
    this.rootView = rootView;
    this.btnRecord = btnRecord;
    this.btnRefreshDevices = btnRefreshDevices;
    this.btnResetClip = btnResetClip;
    this.clipIndicatorContainer = clipIndicatorContainer;
    this.levelMeterView = levelMeterView;
    this.sampleRateContainer = sampleRateContainer;
    this.spinnerSampleRate = spinnerSampleRate;
    this.topAppBar = topAppBar;
    this.tvBitDepthInfo = tvBitDepthInfo;
    this.tvChannelInfo = tvChannelInfo;
    this.tvClipIndicator = tvClipIndicator;
    this.tvConnectionStatus = tvConnectionStatus;
    this.tvFormatInfo = tvFormatInfo;
    this.tvNegotiatedSampleRate = tvNegotiatedSampleRate;
    this.tvRecordingFilename = tvRecordingFilename;
    this.tvRecordingTime = tvRecordingTime;
    this.tvSampleRateInfo = tvSampleRateInfo;
    this.tvSampleRateLabel = tvSampleRateLabel;
    this.tvSampleRateStatus = tvSampleRateStatus;
    this.tvSampleRateSupport = tvSampleRateSupport;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnRecord;
      MaterialButton btnRecord = ViewBindings.findChildViewById(rootView, id);
      if (btnRecord == null) {
        break missingId;
      }

      id = R.id.btnRefreshDevices;
      MaterialButton btnRefreshDevices = ViewBindings.findChildViewById(rootView, id);
      if (btnRefreshDevices == null) {
        break missingId;
      }

      id = R.id.btnResetClip;
      MaterialButton btnResetClip = ViewBindings.findChildViewById(rootView, id);
      if (btnResetClip == null) {
        break missingId;
      }

      id = R.id.clipIndicatorContainer;
      LinearLayout clipIndicatorContainer = ViewBindings.findChildViewById(rootView, id);
      if (clipIndicatorContainer == null) {
        break missingId;
      }

      id = R.id.levelMeterView;
      LevelMeterView levelMeterView = ViewBindings.findChildViewById(rootView, id);
      if (levelMeterView == null) {
        break missingId;
      }

      id = R.id.sampleRateContainer;
      LinearLayout sampleRateContainer = ViewBindings.findChildViewById(rootView, id);
      if (sampleRateContainer == null) {
        break missingId;
      }

      id = R.id.spinnerSampleRate;
      Spinner spinnerSampleRate = ViewBindings.findChildViewById(rootView, id);
      if (spinnerSampleRate == null) {
        break missingId;
      }

      id = R.id.topAppBar;
      MaterialToolbar topAppBar = ViewBindings.findChildViewById(rootView, id);
      if (topAppBar == null) {
        break missingId;
      }

      id = R.id.tvBitDepthInfo;
      TextView tvBitDepthInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvBitDepthInfo == null) {
        break missingId;
      }

      id = R.id.tvChannelInfo;
      TextView tvChannelInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvChannelInfo == null) {
        break missingId;
      }

      id = R.id.tvClipIndicator;
      TextView tvClipIndicator = ViewBindings.findChildViewById(rootView, id);
      if (tvClipIndicator == null) {
        break missingId;
      }

      id = R.id.tvConnectionStatus;
      TextView tvConnectionStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvConnectionStatus == null) {
        break missingId;
      }

      id = R.id.tvFormatInfo;
      TextView tvFormatInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvFormatInfo == null) {
        break missingId;
      }

      id = R.id.tvNegotiatedSampleRate;
      TextView tvNegotiatedSampleRate = ViewBindings.findChildViewById(rootView, id);
      if (tvNegotiatedSampleRate == null) {
        break missingId;
      }

      id = R.id.tvRecordingFilename;
      TextView tvRecordingFilename = ViewBindings.findChildViewById(rootView, id);
      if (tvRecordingFilename == null) {
        break missingId;
      }

      id = R.id.tvRecordingTime;
      TextView tvRecordingTime = ViewBindings.findChildViewById(rootView, id);
      if (tvRecordingTime == null) {
        break missingId;
      }

      id = R.id.tvSampleRateInfo;
      TextView tvSampleRateInfo = ViewBindings.findChildViewById(rootView, id);
      if (tvSampleRateInfo == null) {
        break missingId;
      }

      id = R.id.tvSampleRateLabel;
      TextView tvSampleRateLabel = ViewBindings.findChildViewById(rootView, id);
      if (tvSampleRateLabel == null) {
        break missingId;
      }

      id = R.id.tvSampleRateStatus;
      TextView tvSampleRateStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvSampleRateStatus == null) {
        break missingId;
      }

      id = R.id.tvSampleRateSupport;
      TextView tvSampleRateSupport = ViewBindings.findChildViewById(rootView, id);
      if (tvSampleRateSupport == null) {
        break missingId;
      }

      return new ActivityMainBinding((CoordinatorLayout) rootView, btnRecord, btnRefreshDevices,
          btnResetClip, clipIndicatorContainer, levelMeterView, sampleRateContainer,
          spinnerSampleRate, topAppBar, tvBitDepthInfo, tvChannelInfo, tvClipIndicator,
          tvConnectionStatus, tvFormatInfo, tvNegotiatedSampleRate, tvRecordingFilename,
          tvRecordingTime, tvSampleRateInfo, tvSampleRateLabel, tvSampleRateStatus,
          tvSampleRateSupport);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
