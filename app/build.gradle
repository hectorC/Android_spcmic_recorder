plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

def enableAsan = project.hasProperty("enableAsan") && project.property("enableAsan") == "true"

android {
    namespace 'com.spcmic.recorder'
    compileSdk 35

    defaultConfig {
        applicationId "com.spcmic.recorder"
        minSdk 29  // USB Audio Class support requires API 29+
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        ndk {
            if (enableAsan) {
                abiFilters 'arm64-v8a'
            } else {
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }
        
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17 -frtti -fexceptions"
                arguments "-DANDROID_STL=c++_static", 
                          "-DENABLE_ADDRESS_SANITIZER=${enableAsan ? 'ON' : 'OFF'}",
                          "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON"
            }
        }

    }

    signingConfigs {
        debug {
            // Debug uses the default Android debug keystore
        }
        release {
            // For now, use debug signing for release builds
            // In production, replace with your actual signing key
            storeFile file(System.getProperty("user.home") + "/.android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
        }
        
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            
            // Native optimization flags already set in CMakeLists.txt
            ndk {
                debugSymbolLevel 'FULL'  // Keep symbols for crash reporting
            }
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }
    
    buildFeatures {
        viewBinding true
    }
    
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            version "3.22.1"
        }
    }
    
    ndkVersion "26.1.10909125"

    packaging {
        jniLibs {
            useLegacyPackaging = enableAsan
            if (enableAsan) {
                keepDebugSymbols += ["**/libasanwrap.so"]
            }
            // Keep debug symbols for better crash reporting
            // 16 KB alignment is automatically handled by AGP 8.3+ and NDK r26+
            keepDebugSymbols += ["**/arm64-v8a/*.so", "**/x86_64/*.so"]
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.activity:activity-ktx:1.8.2'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    
    // For file operations
    implementation 'androidx.documentfile:documentfile:1.0.1'
    
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}